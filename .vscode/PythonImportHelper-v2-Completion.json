[
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "DjangoUnicodeDecodeError",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "DjangoUnicodeDecodeError",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "AccountView",
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "isExtraImport": true,
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "AccountRegisterView",
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "isExtraImport": true,
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "isExtraImport": true,
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "SetNewPasswordView",
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "isExtraImport": true,
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "isExtraImport": true,
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "IsOwnUserOrReadOnly",
        "importPath": "account.api.v1.permissions",
        "description": "account.api.v1.permissions",
        "isExtraImport": true,
        "detail": "account.api.v1.permissions",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "isExtraImport": true,
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "isExtraImport": true,
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "AccountUpdateSerializer",
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "isExtraImport": true,
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "isExtraImport": true,
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "Util",
        "importPath": "account.api.v1.utils",
        "description": "account.api.v1.utils",
        "isExtraImport": true,
        "detail": "account.api.v1.utils",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "eskiz",
        "importPath": "core.eskiz",
        "description": "core.eskiz",
        "isExtraImport": true,
        "detail": "core.eskiz",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "IsOwnUserOrReadOnly",
        "kind": 6,
        "importPath": "account.api.v1.permissions",
        "description": "account.api.v1.permissions",
        "peekOfCode": "class IsOwnUserOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object to edit it.\n    Assumes the model instance has an `owner` attribute.\n    \"\"\"\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True",
        "detail": "account.api.v1.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "kind": 6,
        "importPath": "account.api.v1.permissions",
        "description": "account.api.v1.permissions",
        "peekOfCode": "class IsAuthenticated(permissions.IsAuthenticated):\n    \"\"\"\n    Allows access only to authenticated users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return bool(request.user.is_active)",
        "detail": "account.api.v1.permissions",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(min_length=6, max_length=68, write_only=True)\n    password2 = serializers.CharField(min_length=6, max_length=68, write_only=True)\n    class Meta:\n        model = Account\n        fields = ('full_name', 'email', 'password', 'password2')\n    def validate(self, attrs):\n        password = attrs.get('password')\n        password2 = attrs.get('password2')\n        if password != password2:",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class LoginSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(max_length=100, required=True)\n    password = serializers.CharField(max_length=68, write_only=True)\n    tokens = serializers.SerializerMethodField(read_only=True)\n    def get_tokens(self, obj):\n        email = obj.get('email')\n        tokens = Account.objects.get(email=email).tokens\n        return tokens\n    class Meta:\n        model = Account",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "EmailVerificationSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class EmailVerificationSerializer(serializers.ModelSerializer):\n    tokens = serializers.CharField(max_length=555)\n    class Meta:\n        model = Account\n        fields = ('tokens',)\nclass ResetPasswordSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField()\n    class Meta:\n        model = Account\n        fields = ('email',)",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class ResetPasswordSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField()\n    class Meta:\n        model = Account\n        fields = ('email',)\nclass AccountUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'full_name', 'image_url', 'email', 'phone',)\nclass AccountSerializer(serializers.ModelSerializer):",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "AccountUpdateSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class AccountUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'full_name', 'image_url', 'email', 'phone',)\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'full_name',)\nclass AccountOwnImageUpdateSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'full_name',)\nclass AccountOwnImageUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('image',)\nclass SetNewPasswordSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(min_length=6, max_length=64, write_only=True)",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "AccountOwnImageUpdateSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class AccountOwnImageUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('image',)\nclass SetNewPasswordSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    password2 = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    uidb64 = serializers.CharField(max_length=68, required=True)\n    token = serializers.CharField(max_length=555, required=True)\n    class Meta:",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "SetNewPasswordSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class SetNewPasswordSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    password2 = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    uidb64 = serializers.CharField(max_length=68, required=True)\n    token = serializers.CharField(max_length=555, required=True)\n    class Meta:\n        model = Account\n        fields = ('password', 'password2', 'uidb64', 'token')\n    def validate(self, attrs):\n        password = attrs.get('password')",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "ChangeNewPasswordSerializer",
        "kind": 6,
        "importPath": "account.api.v1.serializers",
        "description": "account.api.v1.serializers",
        "peekOfCode": "class ChangeNewPasswordSerializer(serializers.ModelSerializer):\n    old_password = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    password = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    password2 = serializers.CharField(min_length=6, max_length=64, write_only=True)\n    class Meta:\n        model = Account\n        fields = ('old_password', 'password', 'password2')\n    def validate(self, attrs):\n        old_password = attrs.get('old_password')\n        password = attrs.get('password')",
        "detail": "account.api.v1.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "account.api.v1.urls",
        "description": "account.api.v1.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', AccountRegisterView.as_view()),\n    path('login/', LoginView.as_view()),\n    path('verify-email/', EmailVerificationAPIView.as_view()),\n    path('reset-password/', ResetPasswordAPIView.as_view()),\n    path('set-password-confirm/<str:uidb64>/<str:token>/', SetPasswordConfirmAPIView.as_view()),\n    path('set-password-completed/', SetNewPasswordView.as_view()),\n    path('own/<int:pk>/', AccountView.as_view()),\n    path('profile/<int:pk>/', AccountRetrieveUpdateView.as_view()),\n    path('profiles/', AccountListView.as_view()),",
        "detail": "account.api.v1.urls",
        "documentation": {}
    },
    {
        "label": "Util",
        "kind": 6,
        "importPath": "account.api.v1.utils",
        "description": "account.api.v1.utils",
        "peekOfCode": "class Util:\n    @staticmethod\n    def send_email(data: dict):\n        email = EmailMessage(to=[data['to_email']], subject=data['email_subject'], body=data['email_body'])\n        email.send()",
        "detail": "account.api.v1.utils",
        "documentation": {}
    },
    {
        "label": "AccountRegisterView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class AccountRegisterView(generics.GenericAPIView):\n    # http://127.0.0.1:8000/api/account/v1/register/\n    serializer_class = RegisterSerializer\n    # user create\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        # user details or data\n        user_data = serializer.data",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "EmailVerificationAPIView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class EmailVerificationAPIView(APIView):\n    # http://127.0.0.1:8000/account/verify-email/?token={token}/\n    serializer_class = EmailVerificationSerializer\n    permission_classes = (AllowAny,)\n    token_param_config = openapi.Parameter('token', in_=openapi.IN_QUERY, description='Verify email',\n                                           type=openapi.TYPE_STRING)\n    def get(self, request):\n        token = request.GET.get('token')\n        try:\n            payload = jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256'])",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class LoginView(generics.GenericAPIView):\n    # http://127.0.0.1:8000/api/account/v1/login/\n    serializer_class = LoginSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        return Response({'success': True, 'data': serializer.data}, status=status.HTTP_200_OK)\nclass AccountRetrieveUpdateView(generics.RetrieveUpdateAPIView):\n    # http://127.0.0.1:8000/api/account/v1/retrieve-update/<id>/\n    serializer_class = AccountUpdateSerializer",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "AccountRetrieveUpdateView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class AccountRetrieveUpdateView(generics.RetrieveUpdateAPIView):\n    # http://127.0.0.1:8000/api/account/v1/retrieve-update/<id>/\n    serializer_class = AccountUpdateSerializer\n    queryset = Account.objects.all()\n    permission_classes = (IsOwnUserOrReadOnly, IsAuthenticated)\n    def get(self, request, *args, **kwargs):\n        query = self.get_object()\n        if query:\n            serializer = self.get_serializer(query)\n            return Response({'success': True, 'data': serializer.data}, status=status.HTTP_200_OK)",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "SetPasswordConfirmAPIView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class SetPasswordConfirmAPIView(views.APIView):\n    # http://127.0.0.1:8000/account/set-password-confirm/<uidb64>/<token>/\n    permission_classes = (AllowAny,)\n    def get(self, request, uidb64, token):\n        try:\n            _id = smart_str(urlsafe_base64_decode(uidb64))\n            user = Account.objects.filter(id=_id).first()\n            if not PasswordResetTokenGenerator().check_token(user, token):\n                return Response({'success': False, 'message': 'Token is not valid, please try again'},\n                                status=status.HTTP_406_NOT_ACCEPTABLE)",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "SetNewPasswordView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class SetNewPasswordView(generics.UpdateAPIView):\n    # http://127.0.0.1:8000/api/account/v1/set-password/\n    serializer_class = SetNewPasswordSerializer\n    permission_classes = (IsOwnUserOrReadOnly, IsAuthenticated)\n    def patch(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            return Response({'success': True, 'message': 'Successfully set new password'}, status=status.HTTP_200_OK)\n        return Response({'success': False, 'message': 'Credentials is invalid'}, status=status.HTTP_406_NOT_ACCEPTABLE)\nclass ResetPasswordAPIView(generics.GenericAPIView):",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordAPIView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class ResetPasswordAPIView(generics.GenericAPIView):\n    # http://127.0.0.1:8000/account/v1/reset-password/\n    serializer_class = ResetPasswordSerializer\n    def post(self, request):\n        user = Account.objects.filter(email=request.data['email']).first()\n        print(3333333333333)\n        if user:\n            print(111111111111)\n            uidb64 = urlsafe_base64_encode(smart_bytes(user.id))\n            print(2222222)",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "AccountView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class AccountView(generics.RetrieveAPIView):\n    # http://127.0.0.1:8000/api/account/v1/get-account/\n    permission_classes = (IsOwnUserOrReadOnly, IsAuthenticated,)\n    serializer_class = AccountUpdateSerializer\n    def queryset(self, request, *args, **kwargs):\n        user = request.user\n        query = Account.objects.get(id=user.id)\n        serializer = self.get_serializer(query)\n        return Response({'success': True, 'data': serializer.data}, status=status.HTTP_200_OK)\nclass AccountOwnImageUpdateView(generics.RetrieveUpdateAPIView):",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "AccountOwnImageUpdateView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class AccountOwnImageUpdateView(generics.RetrieveUpdateAPIView):\n    # http://127.0.0.1:8000/api/account/v1/image-retrieve-update/<id>/\n    serializer_class = AccountOwnImageUpdateSerializer\n    queryset = Account.objects.all()\n    permission_classes = (IsOwnUserOrReadOnly, IsAuthenticated)\n    def get(self, request, *args, **kwargs):\n        query = self.get_object()\n        if query:\n            serializer = self.get_serializer(query)\n            return Response({'success': True, 'data': serializer.data}, status=status.HTTP_200_OK)",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "AccountListView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class AccountListView(generics.ListAPIView):\n    # http://127.0.0.1:8000/api/account/v1/list/\n    serializer_class = AccountUpdateSerializer\n    queryset = Account.objects.all()\n    permission_classes = (IsAuthenticated,)\n    def get_queryset(self):\n        qs = super().get_queryset()\n        q = self.request.GET.get('q')\n        q_condition = Q()\n        if q:",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "ChangePasswordCompletedView",
        "kind": 6,
        "importPath": "account.api.v1.views",
        "description": "account.api.v1.views",
        "peekOfCode": "class ChangePasswordCompletedView(generics.UpdateAPIView):\n    # http://127.0.0.1:8000/account/change-password/\n    queryset = Account.objects.all()\n    serializer_class = ChangeNewPasswordSerializer\n    permission_classes = (IsAuthenticated,)\n    lookup_field = 'pk'\n    def patch(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={'request': request})\n        serializer.is_valid(raise_exception=True)\n        return Response({'success': True, 'message': 'Successfully set new password'}, status=status.HTTP_200_OK)",
        "detail": "account.api.v1.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "account.api.urls",
        "description": "account.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('v1/', include('account.api.v1.urls'))\n]",
        "detail": "account.api.urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0001_initial",
        "description": "account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Account\",\n            fields=[\n                (",
        "detail": "account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AccountAdmin",
        "kind": 6,
        "importPath": "account.admin",
        "description": "account.admin",
        "peekOfCode": "class AccountAdmin(admin.ModelAdmin):\n    list_display = ('id', 'full_name', 'email', 'phone', 'date_created', 'is_active')\n    readonly_fields = ('date_modified', 'date_created')\n    search_fields = ('id', 'full_name', 'email', 'phone')\nadmin.site.register(Account, AccountAdmin)",
        "detail": "account.admin",
        "documentation": {}
    },
    {
        "label": "AccountConfig",
        "kind": 6,
        "importPath": "account.apps",
        "description": "account.apps",
        "peekOfCode": "class AccountConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'account'",
        "detail": "account.apps",
        "documentation": {}
    },
    {
        "label": "AccountManager",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class AccountManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if email is None:\n            raise TypeError('User should have a username')\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):\n        if password is None:",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class Account(AbstractBaseUser, PermissionsMixin):\n    class Meta:\n        verbose_name = 'Account'\n        verbose_name_plural = 'Accounts'\n    email = models.EmailField(max_length=50, unique=True, verbose_name='Email', db_index=True, null=True)\n    full_name = models.CharField(max_length=50, verbose_name='Full name', null=True)\n    phone = models.CharField(max_length=16, verbose_name='Phone Number', null=True)\n    image = models.ImageField(upload_to='accounts/', verbose_name='Account image', null=True, blank=True)\n    is_superuser = models.BooleanField(default=False, verbose_name='Super user')\n    is_staff = models.BooleanField(default=False, verbose_name='Staff user')",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*#3kq$q!bmd@=7!=&e!sxjsb1#g)t_q+)5yrh2k00s*f707r!l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-*#3kq$q!bmd@=7!=&e!sxjsb1#g)t_q+)5yrh2k00s*f707r!l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django_filters',\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django_filters',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django_filters',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'jazzmin',\n    'django_filters',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'eskiz_sms',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\nLOCAL_BASE_URL = 'http://127.0.0.1:8000'\nPROD_BASE_URL = 'http://localhost:3000'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_BASE_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOCAL_BASE_URL = 'http://127.0.0.1:8000'\nPROD_BASE_URL = 'http://localhost:3000'\n# PROD_BASE_URL = 'https://w4.citynet.uz:4441'\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "PROD_BASE_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "PROD_BASE_URL = 'http://localhost:3000'\n# PROD_BASE_URL = 'https://w4.citynet.uz:4441'\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://127.0.0.1:3000\",\n    \"http://localhost:3000\",\n]\nCORS_ALLOW_METHODS = [\n    '*'\n]\nCORS_ALLOW_HEADERS = [\n    '*'\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    '*'\n]\nCORS_ALLOW_HEADERS = [\n    '*'\n]\nCORS_ALLOW_CREDENTIALS = True\nAUTH_USER_MODEL = 'account.Account'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\n    '*'\n]\nCORS_ALLOW_CREDENTIALS = True\nAUTH_USER_MODEL = 'account.Account'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nAUTH_USER_MODEL = 'account.Account'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'account.Account'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'\nROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Tashkent'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Tashkent'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]\nMEDIA_URL = 'media/'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / 'static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nEMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nEMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nEMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nEMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_PORT = 587\n# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\nEMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'sorcacompany1@gmail.com'\nEMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'\n        }\n    }",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'vhwphrchttgxwqay'\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'\n        }\n    }\n}",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'\n        }\n    }\n}\nSIMPLE_JWT = {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "JAZZMIN_UI_TWEAKS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "JAZZMIN_UI_TWEAKS = {\n    \"navbar_small_text\": False,\n    \"footer_small_text\": False,\n    \"body_small_text\": True,\n    \"brand_small_text\": False,\n    \"brand_colour\": \"navbar-danger\",\n    \"accent\": \"accent-primary\",\n    \"navbar\": \"navbar-dark\",\n    \"no_navbar_border\": False,\n    \"navbar_fixed\": False,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "JAZZMIN_SETTINGS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "JAZZMIN_SETTINGS = {\n    \"topmenu_links\"\n    # title of the window (Will default to current_admin_site.site_title if absent or None)\n    \"site_title\": \"S-orca\",\n    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)\n    \"site_header\": \"S-orca adminstration\",\n    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)\n    \"site_brand\": \"S-orca\",\n    # Logo to use for your site, must be present in static files, used for brand on top left\n    # \"site_logo\": \"img\\logo.png\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"B2B Token\",\n        default_version='v1',\n        description=\"Mall official site description\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@snippets.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    # swagger\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    # token\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]\nurlpatterns += [\n    # admin",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "HomeConfig",
        "kind": 6,
        "importPath": "home.apps",
        "description": "home.apps",
        "peekOfCode": "class HomeConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'home'",
        "detail": "home.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "sms.migrations.0001_initial",
        "description": "sms.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Application',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('surname', models.CharField(max_length=100)),",
        "detail": "sms.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "sms.migrations.0002_remove_application_code_alter_application_surname",
        "description": "sms.migrations.0002_remove_application_code_alter_application_surname",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('sms', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='application',\n            name='code',\n        ),\n        migrations.AlterField(",
        "detail": "sms.migrations.0002_remove_application_code_alter_application_surname",
        "documentation": {}
    },
    {
        "label": "SmsConfig",
        "kind": 6,
        "importPath": "sms.apps",
        "description": "sms.apps",
        "peekOfCode": "class SmsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sms'",
        "detail": "sms.apps",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "sms.models",
        "description": "sms.models",
        "peekOfCode": "class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=100, validators=[validate_uzb_phone_number])\n    message = models.CharField(max_length=1000)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "sms.models",
        "documentation": {}
    },
    {
        "label": "validate_uzb_phone_number",
        "kind": 2,
        "importPath": "sms.models",
        "description": "sms.models",
        "peekOfCode": "def validate_uzb_phone_number(value):\n    pattern = '^\\+998\\d{9}$'\n    if not re.match(pattern, value):\n        raise ValidationError(\n            _('%(value)s is not a valid Uzbekistan phone number'),\n            params={'value': value},\n        )\nclass Contact(models.Model):\n    name = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=100, validators=[validate_uzb_phone_number])",
        "detail": "sms.models",
        "documentation": {}
    },
    {
        "label": "ApplicationSerializer",
        "kind": 6,
        "importPath": "sms.serializers",
        "description": "sms.serializers",
        "peekOfCode": "class ApplicationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Application\n        fields = ['surname', 'phone_number', 'is_confirmed']",
        "detail": "sms.serializers",
        "documentation": {}
    },
    {
        "label": "send_background_sms",
        "kind": 2,
        "importPath": "sms.tasks",
        "description": "sms.tasks",
        "peekOfCode": "def send_background_sms(phone_number, message):\n    try:\n        eskiz.send_sms(str(phone_number)[1:], message, from_whom='4546')\n        return {\"status\": \"success\"}\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": str(e)}",
        "detail": "sms.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sms.urls",
        "description": "sms.urls",
        "peekOfCode": "urlpatterns = [\n    path('application/', ApplicationView.as_view()),\n]",
        "detail": "sms.urls",
        "documentation": {}
    },
    {
        "label": "ApplicationView",
        "kind": 6,
        "importPath": "sms.views",
        "description": "sms.views",
        "peekOfCode": "class ApplicationView(APIView):\n    def post(self, request):\n        serializer = ApplicationSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            # Send SMS\n            ESKIZ_API_URL = \"https://notify.eskiz.uz/api/\"\n            headers = {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer your_token',  # replace 'your_token' with your actual token",
        "detail": "sms.views",
        "documentation": {}
    },
    {
        "label": "get_season",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_season(month):\n    # Define the mapping of months to seasons\n    seasons = {\n        1: \"Winter\",\n        2: \"Winter\",\n        3: \"Spring\",\n        4: \"Spring\",\n        5: \"Spring\",\n        6: \"Summer\",\n        7: \"Summer\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "month_number",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "month_number = 3\nseason_name = get_season(month_number)\nprint(f\"The season for month {month_number} is {season_name}.\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "season_name",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "season_name = get_season(month_number)\nprint(f\"The season for month {month_number} is {season_name}.\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]